# doctest_in_help.txt
===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

``my_function()`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``*`` operator.

::

    >>> matrix_mul = __import__('100-matrix_mul').matrix_mul
    >>> print(matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[7, 10], [15, 22]]

    >>> print(matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
    [[13, 16]]

	>>> print(matrix_mul([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [[-4, 5], [5, -6], [-6, 7]]))
	[[-12, 14], [-17, 20], [-22, 26]]

Non-Numbers
===========

Because ``*`` is also defined on data types other than numbers,
``my_function()`` works just as well if one of the arguments is a
string, a list, or a tuple.

::

	>>> print(matrix_mul([[]], [[2]]))
	Traceback (most recent call last):
	ValueError: m_a can't be empty

	>>> print(matrix_mul([[1]], [[]]))
	Traceback (most recent call last):
	ValueError: m_b can't be empty

	>>> print(matrix_mul((), [[], []]))
	Traceback (most recent call last):
	TypeError: m_a must be a list

	>>> print(matrix_mul(0, 0))
	Traceback (most recent call last):
	TypeError: m_a must be a list

	>>> print(matrix_mul([[]], 0))
	Traceback (most recent call last):
	TypeError: m_b must be a list

	>>> print(matrix_mul([()], [[]]))
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

	>>> print(matrix_mul([], [[]]))
	Traceback (most recent call last):
	TypeError: m_a must be a list of lists

	>>> print(matrix_mul([[]], [()]))
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

	>>> print(matrix_mul([[]], []))
	Traceback (most recent call last):
	TypeError: m_b must be a list of lists

	>>> print(matrix_mul([[1,2,3],[1,2,3]], [[1,2,3],[1,2,"2"],[1,2,3]]))
	Traceback (most recent call last):
	TypeError: m_b should contain only integers or floats

	>>> print(matrix_mul([[1,2,"3"],[1,2,3]], [[1,2,3],[1,2,3],[1,2,3]]))
	Traceback (most recent call last):
	TypeError: m_a should contain only integers or floats

	>>> print(matrix_mul([[1,2,3],[1,2]], [[1,2,3],[1,2,3],[1,2,3]]))
	Traceback (most recent call last):
	TypeError: each row of m_a must should be of the same size

	>>> print(matrix_mul([[1,2,3],[1,2,3]], [[1,2,3],[1,2],[1,2,3]]))
	Traceback (most recent call last):
	TypeError: each row of m_b must should be of the same size

	>>> print(matrix_mul([[2,3],[1,2,3]], [[1,2,3],[1,2],[1,2,3]]))
	Traceback (most recent call last):
	TypeError: each row of m_a must should be of the same size

	>>> print(matrix_mul([[2],[1,2,3]], [[1,2,3],[1,2],[1,2,3]]))
	Traceback (most recent call last):
	TypeError: each row of m_a must should be of the same size


	>>> print(matrix_mul([[0],[0]], [[0],[0]]))
	Traceback (most recent call last):
	ValueError: m_a and m_b can't be multiplied