# doctest_in_help.txt
===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

``my_function()`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``*`` operator.

::

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
    >>> print(lazy_matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]]))
    [[ 7 10]
     [15 22]]

    >>> print(lazy_matrix_mul([[1, 2]], [[3, 4], [5, 6]]))
    [[13 16]]

Non-Numbers
===========

Because ``*`` is also defined on data types other than numbers,
``my_function()`` works just as well if one of the arguments is a
string, a list, or a tuple.

::

	>>> print(lazy_matrix_mul([[]], [[], []])) #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its

	>>> print(lazy_matrix_mul([[2, 1]], [[], []]))
	[]

	>>> print(lazy_matrix_mul((), [[], []])) #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 0)


	>>> print(lazy_matrix_mul([[]], ())) #doctest: +IGNORE_EXCEPTION_DETAIL
	[0.]

	>>> print(lazy_matrix_mul([()], [[]])) #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)


	>>> print(lazy_matrix_mul([[]], [()])) #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 0)

	>>> print(lazy_matrix_mul([[1,2,3],[1,2,3]], [[1,2,3],[1,2,"2"],[1,2,3]])) #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	TypeError: ufunc 'matmul' did not contain a loop with signature matching types dtype('<U21') dtype('<U21') dtype('<U21')

	>>> print(lazy_matrix_mul([[1,2,"3"],[1,2,3]], [[1,2,3],[1,2,3],[1,2,3]])) #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	TypeError: ufunc 'matmul' did not contain a loop with signature matching types dtype('<U21') dtype('<U21') dtype('<U21')

	>>> print(lazy_matrix_mul([[1,2,3],[1,2]], [[1,2,3],[1,2,3],[1,2,3]])) #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mi(size 3 is different from 2)

	>>> print(lazy_matrix_mul([[1,2,3],[1,2,3]], [[1,2,3],[1,2],[1,2,3]])) #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	TypeError: ufunc 'matmul' not supported fpes according to the casting rule ''safe''

	>>> print(lazy_matrix_mul([[2,3],[1,2,3]], [[1,2,3],[1,2],[1,2,3]])) #doctest: +IGNORE_EXCEPTION_DETAIL
	Traceback (most recent call last):
	ValueError: matmul: Input operand 1 has a mismatch infferent from 2)

