# doctest_in_help.txt
===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

``my_function()`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``*`` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2.0, 3.0)
    5

::

    >>> add_integer(2, 3.0)
    5

It also works with floating-point values.

::

    >>> add_integer(2.0, 3)
    5

whit negative numbers

::
	>>> add_integer(2, -3)
	-1

just a

::
    >>> add_integer(3)
    101

Non-Numbers
===========

Because ``*`` is also defined on data types other than numbers,
``my_function()`` works just as well if one of the arguments is a
string, a list, or a tuple.

::

    >>> add_integer("jol", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(3, "hiol")
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

    >>> add_integer(None, 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer("jol", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(('nan'), ('nan'))
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(-float("inf"), float("inf"))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer


    >>> type(add_integer(10e500**2, 1))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

    >>> type(add_integer(float('nan'), -2))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
