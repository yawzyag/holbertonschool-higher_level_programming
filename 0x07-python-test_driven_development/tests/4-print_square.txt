# doctest_in_help.txt
===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

``my_function()`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``*`` operator.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(4)
    ####
    ####
    ####
    ####
    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########


Non-Numbers
===========

Because ``*`` is also defined on data types other than numbers,
``my_function()`` works just as well if one of the arguments is a
string, a list, or a tuple.

::

	>>> print_square(-4)
	Traceback (most recent call last):
	ValueError: size must be >= 0

	>>> print_square("ahsj")
	Traceback (most recent call last):
	TypeError: size must be an integer

	>>> print_square(3.7)
	Traceback (most recent call last):
	TypeError: size must be an integer

	>>> print_square(float("inf"))
	Traceback (most recent call last):
	TypeError: size must be an integer

	>>> print_square(float("-inf"))
	Traceback (most recent call last):
	TypeError: size must be an integer

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
