# doctest_in_help.txt
===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

``my_function()`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``*`` operator.

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)

    >>> print(my_list)
    [1, 4, 2, 3, 5]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

    >>> print(my_list)
    [1, 4, 2, 3, 5]


    >>> l = MyList()
    >>> l.print_sorted()
    []

    >>> l.append(1)
    >>> l.append(2)
    >>> l.append(3)
    >>> l.append(5)
    >>> print(l)
    [1, 2, 3, 5]

    >>> l.print_sorted()
    [1, 2, 3, 5]


::


whit negative numbers

::

    >>> l.append(-1)
    >>> l.append(-2)
    >>> l.append(-3)
    >>> l.append(-5)
    >>> l.print_sorted()
    [-5, -3, -2, -1, 1, 2, 3, 5]

just a

::

Non-Numbers
===========

Because ``*`` is also defined on data types other than numbers,
``my_function()`` works just as well if one of the arguments is a
string, a list, or a tuple.

::

    >>> l.print_sorted(l)
    Traceback (most recent call last):
    TypeError: print_sorted() takes 1 positional argument but 2 were given


    >>> juanito.print_sorted()
    Traceback (most recent call last):
    NameError: name 'juanito' is not defined

    >>> juanito = "string"
    >>> juanito.print_sorted()
    Traceback (most recent call last):
    AttributeError: 'str' object has no attribute 'print_sorted'
