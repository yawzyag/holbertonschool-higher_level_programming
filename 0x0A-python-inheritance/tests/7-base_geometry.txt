# doctest_in_help.txt
===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

``my_function()`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``*`` operator.

::

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)
    >>> bg.integer_validator("width", 89)
    >>> try:
    ...     bg.integer_validator("name", "John")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0

    >>> try:
    ...     bg.integer_validator("distance", -4)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] distance must be greater than 0

    >>> try:
    ...     bg.area()
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [Exception] area() is not implemented


::

Non-Numbers
===========

Because ``*`` is also defined on data types other than numbers,
``my_function()`` works just as well if one of the arguments is a
string, a list, or a tuple.

::

    >>> bg.integer_validator("float", 4.3)
    Traceback (most recent call last):
    TypeError: float must be an integer

    >>> bg.integer_validator("True", True)
    Traceback (most recent call last):
    TypeError: True must be an integer

    >>> bg.integer_validator("list", [1,2,3])
    Traceback (most recent call last):
    TypeError: list must be an integer


    >>> bg.integer_validator("string", "holi")
    Traceback (most recent call last):
    TypeError: string must be an integer

    >>> bg.integer_validator("none", None)
    Traceback (most recent call last):
    TypeError: none must be an integer

    >>> bg.integer_validator("none")
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator("none", 1, 4)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

    >>> bg.integer_validator("none", (4,))
    Traceback (most recent call last):
    TypeError: none must be an integer


    >>> bg.integer_validator("none", {3,4})
    Traceback (most recent call last):
    TypeError: none must be an integer
