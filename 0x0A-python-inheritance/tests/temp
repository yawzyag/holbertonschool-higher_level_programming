# doctest_in_help.txt
===============================
 How to Use doctest_in_help.py
===============================

This library is very simple, since it only has one function called
``my_function()``.

Numbers
=======

``my_function()`` returns the product of its arguments.  For numbers,
that value is equivalent to using the ``*`` operator.

::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)

    >>> print(my_list)
    [1, 4, 2, 3, 5]

    >>> my_list.print_sorted()
    [1, 2, 3, 4, 5]

    >>> print(my_list)
    [1, 4, 2, 3, 5]


::


::

It also works with floating-point values.

::

whit negative numbers

::

just a

::

Non-Numbers
===========

Because ``*`` is also defined on data types other than numbers,
``my_function()`` works just as well if one of the arguments is a
string, a list, or a tuple.

::

     add_integer("jol", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

     add_integer(3, "hiol")
    Traceback (most recent call last):
    TypeError: b must be an integer

     add_integer()
    Traceback (most recent call last):
    TypeError: add_integer() missing 1 required positional argument: 'a'

     add_integer(None, 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

     add_integer("jol", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

